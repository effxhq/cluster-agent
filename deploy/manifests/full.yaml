---
# Source: cluster-agent/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: effx-cluster-agent
  labels:
    helm.sh/chart: cluster-agent-0.0.0
    app.kubernetes.io/name: cluster-agent
    app.kubernetes.io/instance: effx
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: cluster-agent/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: effx-cluster-agent
rules:
  - apiGroups: ['']
    resources: ['nodes', 'events', 'pods']
    verbs:     ['list', 'get', 'watch']
  - apiGroups: ['apps']
    resources: ['deployments', 'statefulsets', 'daemonsets']
    verbs:     ['list', 'get', 'watch']
---
# Source: cluster-agent/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: effx-cluster-agent
subjects:
  - kind: ServiceAccount
    name: effx-cluster-agent
    namespace: effx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: effx-cluster-agent
---
# Source: cluster-agent/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: effx-cluster-agent
  labels:
    helm.sh/chart: cluster-agent-0.0.0
    app.kubernetes.io/name: cluster-agent
    app.kubernetes.io/instance: effx
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: cluster-agent
    app.kubernetes.io/instance: effx
---
# Source: cluster-agent/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: effx-cluster-agent
  labels:
    helm.sh/chart: cluster-agent-0.0.0
    app.kubernetes.io/name: cluster-agent
    app.kubernetes.io/instance: effx
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cluster-agent
      app.kubernetes.io/instance: effx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cluster-agent
        app.kubernetes.io/instance: effx
    spec:
      serviceAccountName: effx-cluster-agent
      securityContext:
        {}
      containers:
        - name: cluster-agent
          securityContext:
            {}
          image: "ghcr.io/effxhq/cluster-agent:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: EFFX_EXTERNAL_ID
              valueFrom:
                secretKeyRef:
                  name: effx-secrets
                  key: externalID
            - name: EFFX_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: effx-secrets
                  key: secretKey
            - name: EFFX_CLUSTER_NAME
              valueFrom:
                secretKeyRef:
                  name: effx-secrets
                  key: clusterName
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
